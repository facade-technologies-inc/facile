"""
..
    /------------------------------------------------------------------------------\
    |                 -- FACADE TECHNOLOGIES INC.  CONFIDENTIAL --                 |
    |------------------------------------------------------------------------------|
    |                                                                              |
    |    Copyright [2019] Facade Technologies Inc.                                 |
    |    All Rights Reserved.                                                      |
    |                                                                              |
    | NOTICE:  All information contained herein is, and remains the property of    |
    | Facade Technologies Inc. and its suppliers if any.  The intellectual and     |
    | and technical concepts contained herein are proprietary to Facade            |
    | Technologies Inc. and its suppliers and may be covered by U.S. and Foreign   |
    | Patents, patents in process, and are protected by trade secret or copyright  |
    | law.  Dissemination of this information or reproduction of this material is  |
    | strictly forbidden unless prior written permission is obtained from Facade   |
    | Technologies Inc.                                                            |
    |                                                                              |
    \------------------------------------------------------------------------------/

This module contains the code for the copy project dialog.
"""

import sys
import os
from PySide2.QtWidgets import QApplication

sys.path.append(os.path.abspath("../"))




from PySide2.QtCore import Signal, Slot, QTimer
from PySide2.QtWidgets import QWidget, QVBoxLayout, QLabel

# uses this autogenerated python file to create dialog structure.
from gui.ui.ui_validatorview import Ui_Form as Ui_ValidatorView

from data.validatormessage import ValidatorMessage


class ValidatorView(QWidget):
	"""
	The ValidatorView class is the graphical view of the validator. It receives data from the Validator class.
	
	"""
	
	stopped = Signal()
	ran = Signal()
	refreshed = Signal()
	cleared = Signal()
	
	def __init__(self, parent: QWidget = None):
		"""
		Construct the view for the validator.
		"""
		
		super(ValidatorView, self).__init__(parent)
		self.ui = Ui_ValidatorView()
		self.ui.setupUi(self)
		self.setWindowTitle("Validator View")
		
		self.allMessages = []
		self.showLevels = set()
		self.clear()
		self.sync()
		
		self.ui.checkBoxError.toggled.connect(lambda: self.refreshed.emit())
		self.ui.checkBoxWarning.toggled.connect(lambda: self.refreshed.emit())
		self.ui.checkBoxInfo.toggled.connect(lambda: self.refreshed.emit())
		self.ui.runButton.clicked.connect(lambda: self.ran.emit())
		self.ui.stopButton.clicked.connect(lambda: self.stopped.emit())
		self.ui.clearButton.clicked.connect(lambda: self.cleared.emit())
		
		self.refreshed.connect(self.refresh)
		self.cleared.connect(self.clear)
		
		# temp
		self.ran.connect(lambda: print("ran"))
		self.stopped.connect(lambda: print("stopped"))
		

	
	@Slot()
	def clear(self):
		"""
		Clear all the information/messages in the view.
		
		:return: None
		:rtype: NoneType
		"""
		print("cleared")
		self.allMessages = []
		self.ui.centralWidget = QWidget()
		self.ui.messageLayout = QVBoxLayout()
		self.ui.centralWidget.setLayout(self.ui.messageLayout)
		self.ui.scrollArea.setWidget(self.ui.centralWidget)
		
	
	@Slot()
	def refresh(self):
		"""
		Refresh the GUI to show the right widgets.
		
		:return: None
		:rtype: NoneType
		"""
		print("refreshed")
		
		self.sync()
		
		for msg in self.allMessages:
			if msg.level in self.showLevels:
				msg.widget.show()
			else:
				msg.widget.hide()
	
	@Slot(dict)
	def receiveMessage(self, msg: ValidatorMessage):
		"""
		Receive message from the Validator class. Receive one message each time.
		
		:param msg: a customized validator message coming from the validator
		:type msg: ValidatorMessage
		:return: None
		:rtype: NoneType
		"""
		print("message received:", msg)
		self.addWidgetToMessage(msg)
		self.allMessages.append(msg)
		self.ui.messageLayout.addWidget(msg.widget)
		if msg.level in self.showLevels:
			msg.widget.show()
		else:
			msg.widget.hide()

	def addWidgetToMessage(self, msg: ValidatorMessage):
		"""
		Add a QLabel widget to each message received.
		
		:param msg: a customized validator message coming from the validator
		:type msg: ValidatorMessage
		:return: None
		:rtype: NoneType
		"""
		# TODO: use-custom message widget instead of QLabel
		msg.widget = QLabel(msg.text)
		
	def sync(self):
		"""
		determine what kind of messages should be shown.
		
		:return: None
		:rtype: NoneType
		"""
		self.showLevels = set()
		if self.ui.checkBoxError.isChecked():
			self.showLevels.add(ValidatorMessage.Level.Error)
		if self.ui.checkBoxWarning.isChecked():
			self.showLevels.add(ValidatorMessage.Level.Warning)
		if self.ui.checkBoxInfo.isChecked():
			self.showLevels.add(ValidatorMessage.Level.Info)
		
		
if __name__ == "__main__":

	
	app = QApplication([])
	widget = ValidatorView()
	widget.show()
	
	def handler():
		for i in range(100):
			widget.receiveMessage(ValidatorMessage("item " + str(i), ValidatorMessage.Level.Info))
	
	populateTimer = QTimer()
	populateTimer.setSingleShot(True)
	populateTimer.timeout.connect(handler)
	populateTimer.start(5000)
	
	sys.exit(app.exec_())
