"""
..
    /------------------------------------------------------------------------------\
    |                 -- FACADE TECHNOLOGIES INC.  CONFIDENTIAL --                 |
    |------------------------------------------------------------------------------|
    |                                                                              |
    |    Copyright [2019] Facade Technologies Inc.                                 |
    |    All Rights Reserved.                                                      |
    |                                                                              |
    | NOTICE:  All information contained herein is, and remains the property of    |
    | Facade Technologies Inc. and its suppliers if any.  The intellectual and     |
    | and technical concepts contained herein are proprietary to Facade            |
    | Technologies Inc. and its suppliers and may be covered by U.S. and Foreign   |
    | Patents, patents in process, and are protected by trade secret or copyright  |
    | law.  Dissemination of this information or reproduction of this material is  |
    | strictly forbidden unless prior written permission is obtained from Facade   |
    | Technologies Inc.                                                            |
    |                                                                              |
    \------------------------------------------------------------------------------/

This module contains the code for the manage project dialog.
"""

from PySide2.QtWidgets import QDialog, QWidget, QAbstractButton, QColorDialog
from PySide2.QtCore import Signal
from PySide2.QtGui import QPalette

from data.project import Project
# uses this autogenerated python file to create dialog structure.
from gui.ui.ui_manageprojectdialog import Ui_Dialog as Ui_ManageProjectDialog
import gui.facileview as fv

# TODO: get rid of this once Project backend gets switched to enums.
backends = ["win32", "uia"]


class ManageProjectDialog(QDialog):
	"""
	This class is used to show settings for Facile and for the currently opened project, if available.
	"""

	projectUpdated = Signal()
	
	def __init__(self, project: Project, mainWindow: 'FacileView', parent: QWidget = None):
		"""
		Constructs a ManageProjectDialog object.
		
		:param parent: the widget to nest this dialog inside of. If None, this dialog will be a window.
		:type parent: PySide2.QtWidgets.QWidget
		"""
		
		super(ManageProjectDialog, self).__init__(parent)
		self.ui = Ui_ManageProjectDialog()
		self.ui.setupUi(self)
		self.setWindowTitle("Manage Project")

		self.mainWindow: fv.FacileView = mainWindow
		self._project = project
		self.tguimBaseCol = None
		self.actionPipelineBaseCol = None
		self.actionPipelineActionCol = None
		self.actionPipelineInsidePortCol = None
		self.actionPipeLineOutsidePortCol = None

		self.initializeValues()
		self.connectSignals()

		if project:
			# Tabs
			self.ui.project_tab.setEnabled(True)
			self.ui.target_gui_model_tab.setEnabled(True)
			self.ui.api_model_tab.setEnabled(True)

			# TGUIM settings
			self.ui.dynamicCol.setChecked(self.mainWindow.ui.targetGUIModelView.isFlat())
			self.setTGUIMBaseCol(self.mainWindow.ui.targetGUIModelView.baseColor())
			
			# APIM settings
			self.setActionPipelineBaseCol(self.mainWindow.APIM_COLOR_SETTINGS[0])
			self.setActionPipelineWrapperCol(self.mainWindow.APIM_COLOR_SETTINGS[1])
			self.setActionPipelineInsidePortCol(self.mainWindow.APIM_COLOR_SETTINGS[2])
			self.setActionPipelineOutsidePortCol(self.mainWindow.APIM_COLOR_SETTINGS[3])

			# Project settings
			self.ui.locationEdit.setText(project.getProjectDir())
			self.ui.nameEdit.setText(project.getName())
			self.ui.descriptionEdit.setText(project.getDescription())
			self.ui.appEdit.setText(project.getExecutableFile())

			# Backend
			self.ui.backendEdit.clear()
			self.ui.backendEdit.addItems(backends)
			if project.getBackend() in backends:
				idx = backends.index(project.getBackend())
			else:
				idx = 2
			self.ui.backendEdit.setCurrentIndex(idx)

			# Option to close app on exit
			if project.autoCloseAppOnExit:
				self.ui.closeAppConf.setChecked(project.autoCloseAppOnExit)

	def connectSignals(self):
		"""
		Connects any signals needed for proper behavior of the dialog
		"""

		self.ui.buttonBox.clicked.connect(lambda button: self.applySettings(button))
		self.ui.t_baseColButton.clicked.connect(lambda: self.colorPicker_tguim())
		self.ui.a_baseColButton.clicked.connect(lambda: self.colorPicker_actionpipeline_base())
		self.ui.a_actionColButton.clicked.connect(lambda: self.colorPicker_actionpipeline_wrapper())
		self.ui.a_port_InsideColButton.clicked.connect(lambda: self.colorPicker_actionpipeline_inside_port())
		self.ui.a_port_OutsideColButton.clicked.connect(lambda: self.colorPicker_actionpipeline_outside_port())

	def setTGUIMBaseCol(self, color):
		"""
		Opens the color picker, and once it is closed it shows a preview of the current color in a widget.
		Keeps an internal record of the accent color picked as well.

		:param color: The color to set
		:type color: QColor
		"""
		self.tguimBaseCol = color
		palette = QPalette()
		palette.setColor(QPalette.Background, color)
		self.ui.t_baseCol.setPalette(palette)
	
	def setActionPipelineBaseCol(self, color):
		"""
		Opens the color picker, and once it is closed it shows a preview of the current color in a widget.
		Keeps an internal record of the accent color picked as well.

		:param color: The color to set
		:type color: QColor
		"""
		self.actionPipelineBaseCol = color
		palette = QPalette()
		palette.setColor(QPalette.Background, color)
		self.ui.a_baseCol.setPalette(palette)
	
	def setActionPipelineWrapperCol(self, color):
		"""
		Opens the color picker, and once it is closed it shows a preview of the current color in a widget.
		Keeps an internal record of the accent color picked as well.

		:param color: The color to set
		:type color: QColor
		"""
		self.actionPipelineWrapperCol = color
		palette = QPalette()
		palette.setColor(QPalette.Background, color)
		self.ui.a_baseCol.setPalette(palette)
	
	def setActionPipelineInsidePortCol(self, color):
		"""
		Opens the color picker, and once it is closed it shows a preview of the current color in a widget.
		Keeps an internal record of the accent color picked as well.

		:param color: The color to set
		:type color: QColor
		"""
		self.actionPipelineInsidePortCol = color
		palette = QPalette()
		palette.setColor(QPalette.Background, color)
		self.ui.a_port_InsideCol.setPalette(palette)
		
	def setActionPipelineOutsidePortCol(self, color):
		"""
		Opens the color picker, and once it is closed it shows a preview of the current color in a widget.
		Keeps an internal record of the accent color picked as well.

		:param color: The color to set
		:type color: QColor
		"""
		self.actionPipelineOutsidePortCol = color
		palette = QPalette()
		palette.setColor(QPalette.Background, color)
		self.ui.a_port_OutsideCol.setPalette(palette)
		
	def colorPicker_tguim(self):
		"""
		Opens a color picking dialog, then returns the color chosen
		"""
		colSelect = QColorDialog(self.tguimBaseCol)
		colSelect.colorSelected.connect(lambda col: self.setTGUIMBaseCol(col))
		colSelect.exec_()
	
	def colorPicker_actionpipeline_base(self):
		"""
		Opens a color picking dialog, then returns the color chosen
		"""
		colSelect = QColorDialog(self.actionPipelineBaseCol)
		colSelect.colorSelected.connect(lambda col: self.setActionPipelineBaseCol(col))
		colSelect.exec_()
		
	def colorPicker_actionpipeline_wrapper(self):
		"""
		Opens a color picking dialog, then returns the color chosen
		"""
		colSelect = QColorDialog(self.actionPipelineActionCol)
		colSelect.colorSelected.connect(lambda col: self.setActionPipelineWrapperCol(col))
		colSelect.exec_()
		
	def colorPicker_actionpipeline_inside_port(self):
		"""
		Opens a color picking dialog, then returns the color chosen
		"""
		colSelect = QColorDialog(self.actionPipelineInsidePortCol)
		colSelect.colorSelected.connect(lambda col: self.setActionPipelineInsidePortCol(col))
		colSelect.exec_()
	
	def colorPicker_actionpipeline_outside_port(self):
		"""
		Opens a color picking dialog, then returns the color chosen
		"""
		colSelect = QColorDialog(self.actionPipelineOutsidePortCol)
		colSelect.colorSelected.connect(lambda col: self.setActionPipelineOutsidePortCol(col))
		colSelect.exec_()
	
	def initializeValues(self):
		"""
		Initializes all the user settings to be visible/selected
		"""
		self.ui.enableSBs.setChecked(self.mainWindow.scrollBarsEnabled())
		self.setInitTheme()
		self.setInitLayout()
		self.ui.t_baseCol.setAutoFillBackground(True)

	def setInitTheme(self):
		"""
		Sets the theme box to have the current theme
		"""
		self.ui.themeBox.setCurrentIndex(self.mainWindow.getTheme().value - 1)

	def setInitLayout(self):
		"""
		Sets the layout box to have the current layout
		"""
		self.ui.layoutBox.addItems(["Models Only", "Essentials", "Classic", "All"])
		self.ui.layoutBox.setCurrentIndex(self.mainWindow.getLayout().value - 1)

	def applySettings(self, button: QAbstractButton = None, bypass=False):
		"""
		If apply is pressed, apply the settings without closing the window.
		Bypass variable is used for the OK button.

		:param button: The button being pressed
		:type button: QAbstractButton
		:param bypass: Whether to bypass the button criteria (only Apply works otherwise). Default is False.
		:type bypass: bool
		"""

		if bypass or button.text() == 'Apply':
			# Save project settings
			if self._project:
				self._project.setBackend(self.ui.backendEdit.currentText())
				self._project.setName(self.ui.nameEdit.text())
				self._project.setProjectDir(self.ui.locationEdit.text())
				self._project.setDescription(self.ui.descriptionEdit.toPlainText())
				self._project.setExecutableFile(self.ui.appEdit.text())

				if self._project.acaWarningShown:
					if self.ui.closeAppConf.isChecked():
						self._project.autoCloseAppOnExit = True
					else:
						self._project.autoCloseAppOnExit = False

			# Save selected theme and layout
			self.mainWindow.setTheme(fv.FacileView.Theme(self.ui.themeBox.currentIndex() + 1))
			if self.ui.layoutBox.currentIndex() < 4:
				self.mainWindow.setLayout(fv.FacileView.Layout(self.ui.layoutBox.currentIndex() + 1))
			else:
				self.mainWindow.setLayout(fv.FacileView.Layout.CLASSIC)
			self.mainWindow.enableScrollBars(self.ui.enableSBs.isChecked())

			# Save accent colors
			fv.FacileView.TGUIM_COL_SETTINGS = [self.tguimBaseCol, self.ui.dynamicCol.isChecked()]
			fv.FacileView.APIM_COLOR_SETTINGS = [self.actionPipelineBaseCol, self.ui.dynamicCol.isChecked()]
			fv.FacileView.APIM_COLOR_SETTINGS = [self.actionPipelineWrapperCol, self.ui.dynamicCol.isChecked()]
			fv.FacileView.APIM_COLOR_SETTINGS = [self.actionPipelineInsidePortCol, self.ui.dynamicCol.isChecked()]
			fv.FacileView.APIM_COLOR_SETTINGS = [self.actionPipelineOutsidePortCol, self.ui.dynamicCol.isChecked()]
			self.mainWindow.updateColors()

			# Save settings once applied
			self.mainWindow.saveSettings()

			# Called to fix weird bug with color getting reset.
			self.setTGUIMBaseCol(self.tguimBaseCol)
			self.mainWindow.updateAPIMColors(self.actionPipelineBaseCol,
			                                 self.actionPipelineWrapperCol,
			                                 self.actionPipelineInsidePortCol,
			                                 self.actionPipelineOutsidePortCol,
			                                 None)
	
	def accept(self) -> None:
		"""
		Called when the user clicks the "OK" button.
		
		:return: None
		:rtype: NoneType
		"""

		self.applySettings(bypass=True)

		QDialog.accept(self)
	
	def reject(self) -> None:
		"""
		Called when the user clicks the "close" button.

		:return: None
		:rtype: NoneType
		"""
		
		QDialog.reject(self)
