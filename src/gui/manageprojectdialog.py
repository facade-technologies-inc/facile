"""
/------------------------------------------------------------------------------\
|                 -- FACADE TECHNOLOGIES INC.  CONFIDENTIAL --                 |
|------------------------------------------------------------------------------|
|                                                                              |
|    Copyright [2019] Facade Technologies Inc.                                 |
|    All Rights Reserved.                                                      |
|                                                                              |
| NOTICE:  All information contained herein is, and remains the property of    |
| Facade Technologies Inc. and its suppliers if any.  The intellectual and     |
| and technical concepts contained herein are proprietary to Facade            |
| Technologies Inc. and its suppliers and may be covered by U.S. and Foreign   |
| Patents, patents in process, and are protected by trade secret or copyright  |
| law.  Dissemination of this information or reproduction of this material is  |
| strictly forbidden unless prior written permission is obtained from Facade   |
| Technologies Inc.                                                            |
|                                                                              |
\------------------------------------------------------------------------------/

This module contains the code for the manage project dialog.
"""

from PySide2.QtWidgets import QDialog, QWidget
from PySide2.QtCore import Signal, Slot
from data.project import Project

# uses this autogenerated python file to create dialog structure.
from gui.ui.ui_manageprojectdialog import Ui_Dialog as Ui_ManageProjectDialog

#TODO: get rid of this once Project backend gets switched to enums.
backends = ["WIN32", "UIA", "Other"]


class ManageProjectDialog(QDialog):
	"""
	This class is used to create a new project from scratch. It is a dialog that pops up
	and prompts the user to enter information about the project to be created.
	
	When the user enters information, the information will be checked for validity.
	If any information is not valid, the project will not be created and error messages will appear.
	"""
	
	# When a new project is successfully created, this signal will be emitted.
	# It carries the new project.
	projectCreated = Signal(Project)
	
	def __init__(self, project: Project, parent: QWidget = None):
		"""
		Constructs a ManageProjectDialog object.
		
		:param parent: the widget to nest this dialog inside of. If None, this dialog will be a window.
		:type parent: PySide2.QtWidgets.QWidget
		"""
		
		super(ManageProjectDialog, self).__init__(parent)
		self.ui = Ui_ManageProjectDialog()
		self.ui.setupUi(self)
		
		self._project = project
		
		self.ui.locationEdit.setText(project.getProjectDir())
		self.ui.nameEdit.setText(project.getName())
		self.ui.descriptionEdit.setText(project.getDescription())
		self.ui.appEdit.setText(project.getExecutableFile())
		if project.getBackend() in backends:
			idx = backends.index(project.getBackend())
		else:
			idx = 2
		self.ui.backendEdit.setCurrentIndex(idx)
		
	def accept(self) -> None:
		"""
		Called when the user clicks the "save" button.
		
		:return: None
		:rtype: NoneType
		"""
		
		self._project.setBackend(self.ui.backendEdit.currentText())
		self._project.setName(self.ui.nameEdit.text())
		self._project.setProjectDir(self.ui.locationEdit.text())
		self._project.setDescription(self.ui.descriptionEdit.toPlainText())
		self._project.setExecutableFile(self.ui.appEdit.text())
		QDialog.accept(self)
	
	def reject(self) -> None:
		"""
		Called when the user clicks the "close" button.

		:return: None
		:rtype: NoneType
		"""
		
		QDialog.reject(self)
