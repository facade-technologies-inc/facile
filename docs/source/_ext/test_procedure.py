'''
This extension is kind of a hacky way of doing things.

The original goal was to make a test_procedure directive that would create all necessary fields
and images for a test procedure. The difficulties with this are:

- The Sphinx API is weird

So I decided to make an extension that just directly writes the rst code in the initialization
phase.
'''

import random
import pandas as pd
import numpy as np

rchars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

# ATP file path relative to "facile/docs"
atp_file_path = "./source/docs/ATP/ATP.rst"
data_sheets_file_path = "./source/docs/ATP/DataSheets.rst"
procedures_file = "./source/docs/ATP/procedures.xlsx"

warning = """
..
	This document has been auto generated by the test_procedure sphinx extension. Any changes to
	this file will be overwritten. DO NOT EDIT THIS FILE!

"""

atp_header = warning + """
*************************
Acceptance Test Procedure
*************************

"""

data_sheets_header = warning + """
***************************
Acceptance Test Data Sheets
***************************

This document contains a data sheet for each test case in the acceptance test procedure document.
The data sheets in this document are meant to be left unfilled. When the tests are carried out,
a new copy of this document will be created and the data sheets will be filled out.

"""

procedure_template = """
.. raw:: latex

	\\newpage
	
----------------------------------------------------------------------------------------------------
{}
----------------------------------------------------------------------------------------------------

============
Introduction
============

{}

====================
Referenced Documents
====================

{}

=======================
Required Test Equipment
=======================

{}

=========================
Requirements Summary
=========================

{}

===================
Pre-Test Conditions
===================

{}

"""

data_sheet_template = """
.. raw:: latex

	\\newpage
	
----------------------------------------------------------------------------------------------------
{}
----------------------------------------------------------------------------------------------------

..
	============
	Instructions
	============
	
	This data sheet shall remain blank. Copies of this data sheet should be created before testing
	and each sheet shall be filled completely. All data sheets filled out during testing shall be
	and each sheet shall be filled completely. All data sheets filled out during testing shall be
	filled out by hand, scanned, and inserted into a unique folder with no other contents.
	
	===============
	Purpose of Test
	===============
	
	{}

=======================
Required Test Equipment
=======================

{}

===================
Pre-Test Conditions
===================

{}

+--------------------------------+------+
| Responsible Engineer (Printed) | Date |
+================================+======+
|                                |      |
+--------------------------------+------+

{}

+----------------+--------------------+----------------------------+
| Facile Version | Target Application | Target Application Version |
+================+====================+============================+
|                |                    |                            |
+----------------+--------------------+----------------------------+

+----------------------+----------------------+
| Engineer's Signature | Customer's Signature |
+======================+======================+
|                      |                      |
+----------------------+----------------------+

"""

figure_template = """

.. _{}:

.. figure:: ./images/{}
    :alt: {}
    
    {}
    
"""


def random_string_generator(str_size, allowed_chars):
	return ''.join(random.choice(allowed_chars) for x in range(str_size))

def read_procedure_data(filename):
	wb = pd.ExcelFile(filename)
	sheetnames = [name for name in wb.sheet_names if name != "Introduction"]
	test_procedures = []
	for name in sheetnames:
		df = pd.read_excel(wb, name)
		proc = {}
		proc['reqno'] = name
		proc['title'] = df['Title'][0]
		proc['intro'] = df['Introduction'][0]
		proc['refer'] = [a for a in df['Referenced Documents'] if type(a) == str]
		proc['equip'] = [b for b in df['Required Equipment'] if type(b) == str]
		proc['summa'] = df['Requirements Summary'][0]
		proc['preco'] = [c for c in df['Pre-Test Conditions'] if type(c) == str]
		proc['steps'] = []
		proc['figre'] = {}
		
		for i in range(len(df['Steps (Action)'])):
			if type(df['Steps (Action)'][i]) == str and type(df['Steps (Expected Result)'][i]) == str:
				crumbs = df['Steps (Expected Result)'][i].split()
				for j in range(len(crumbs)):
					crumb = crumbs[j]
					if len(crumb) > 1:
						if crumb[0] == '@':
							img_filename = crumb[1:]
							if img_filename in proc['figre'].keys():
								ref_name = proc['figre'][img_filename][0]
							else:
								ref_name = crumb[1:].split('.')[0].replace("_", "")+random_string_generator(8, rchars)
								proc['figre'][img_filename] = (ref_name, "")
							df['Steps (Expected Result)'][i] = df['Steps (Expected Result)'][i].replace("@"+img_filename, ':num:`Fig. #{}`'.format(ref_name.lower()))
				proc['steps'].append((df['Steps (Action)'][i], df['Steps (Expected Result)'][i]))
			else:
				break
		
		
		for i in range(len(df['Figure (filename)'])):
			if type(df['Figure (filename)'][i]) == str and type(df['Figure (caption)'][i]) == str:
				fname = df['Figure (filename)'][i]
				caption = df['Figure (caption)'][i]
				if fname in proc['figre']:
					proc['figre'][fname] = (proc['figre'][fname][0], caption)
				else:
					raise Exception("Figure {} cannot be included without refering to it using "
					                "'@' in testcase {}".format(fname, name))
				proc['steps'].append((df['Steps (Action)'][i], df['Steps (Expected Result)'][i]))
			else:
				break
		
		test_procedures.append(proc)
	return test_procedures


def build_data_sheet_table(steps:list) -> str:
	if len(steps) >= 30:
		raise Exception("Test Procedure must have less than 30 steps")
	
	head = ("Step", "Action", "Passed? (Y/N)", "Comments")
	max_action_length = len(head[1])
	for action, result in steps:
		max_action_length = max(max_action_length, len(action))
	
	widths = (len(head[0]), max_action_length, len(head[2]), len(head[3]))
	table_horizontal = "+-{}-+-{}-+-{}-+-{}-+\n".format("-" * widths[0], "-" * widths[1],
	                                                      "-" * widths[2], "-" * widths[3])
	
	table = ".. tabularcolumns:: |p{30pt}|p{180pt}|p{40pt}|p{180pt}|\n\n"
	table += table_horizontal
	table += "| {}{} | {}{} | {}{} | {}{} |\n".format(head[0], " " * (widths[0] - len(head[0])),
	                                                    head[1], " " * (widths[1] - len(head[1])),
	                                                    head[2], " " * (widths[2] - len(head[2])),
	                                                    head[3], " " * (widths[3] - len(head[3])))
	table += table_horizontal.replace("-", "=")
	
	step_count = 0
	for action, result in steps:
		step_count += 1
		table += "| {:4} | {}{} | {} | {} |\n".format(step_count,
		                                                    action, " " * (widths[1] - len(action)),
		                                                    " " * widths[2],
		                                                    " " * widths[3])
		table += table_horizontal
	
	return table

def build_data_sheet(proc:dict) -> str:
	reqno = proc['reqno']
	title = proc['title']
	equip = "\n".join(["- {}".format(e) for e in proc['equip']])
	summa = proc['summa']
	preco = "\n".join(["- {}".format(p) for p in proc['preco']])
	step_table = build_data_sheet_table(proc['steps'])
	ds_str = data_sheet_template.format(title+" Data Sheet", summa, equip, preco, step_table)
	
	return ds_str

def build_all_data_sheets(procs:list) -> str:
	ds_str = data_sheets_header
	for proc in procs:
		ds_str += build_data_sheet(proc)
	return ds_str

def build_steps_table(steps:list) -> str:
	"""
	This function generates a string that should go in the atp file, NOT the data sheets file.
	The generated string represents a table of steps in the reStructuredText format.
	:param steps: A list of tuples. Each tuple contains (step, expected result)
	:return: an rst-formatted table of steps.
	"""
	
	if len(steps) >= 30:
		raise Exception("Test Procedure must have less than 30 steps")
	
	head = ("Step", "Action", "Expected Result")
	max_action_length = len(head[1])
	max_result_length = len(head[2])
	for action, result in steps:
		max_action_length = max(max_action_length, len(action))
		max_result_length = max(max_result_length, len(result))
	
	widths = (len(head[0]), max_action_length, max_result_length)
	table_horizontal = "\t+-{}-+-{}-+-{}-+\n".format("-"*widths[0], "-"*widths[1], "-"*widths[2])
	
	table =  ".. tabularcolumns:: |c|L|L|\n"
	table += ".. table:: Test Procedure Steps\n\n"
	
	table += table_horizontal
	table += "\t| {}{} | {}{} | {}{} |\n".format(head[0], " "*(widths[0]-len(head[0])),
	                                             head[1], " "*(widths[1]-len(head[1])),
	                                             head[2], " "*(widths[2]-len(head[2])))
	table += table_horizontal.replace("-", "=")
	
	step_count = 0
	for action, result in steps:
		step_count += 1
		table += "\t| {:4} | {}{} | {}{} |\n".format(step_count,
		                                             action, " "*(widths[1] - len(action)),
		                                             result, " "*(widths[2] - len(result)))
		table += table_horizontal
	
	return table

def build_figs(fig_refs):
	
	fig_str = ""
	
	for ref in fig_refs:
		fig_str += figure_template.format(fig_refs[ref][0], ref, fig_refs[ref][1], fig_refs[ref][1])
	
	return fig_str

def setup(app):
	global procedures_file
	global test_procedures
	test_procedures = read_procedure_data(procedures_file)
	
	with open(atp_file_path, "w") as atp_file:
		atp_file.write(atp_header)
		
		for proc in test_procedures:
			title = proc['title']
			intro = proc['intro']
			refer = "\n".join(["- {}".format(r) for r in proc['refer']])
			equip = "\n".join(["- {}".format(e) for e in proc['equip']])
			summa = proc['summa']
			preco = "\n".join(["- {}".format(p) for p in proc['preco']])
			
			procedure = procedure_template.format(title, intro, refer, equip, summa, preco)
			
			atp_file.write(procedure)
			atp_file.write(build_steps_table(proc['steps']))
			atp_file.write(build_figs(proc['figre']))
	
	with open(data_sheets_file_path, "w") as data_sheets_file:
		data_sheets_file.write(build_all_data_sheets(test_procedures))
	
	return {
		'version': '0.1',
		'parallel_read_safe': True,
		'parallel_write_safe': True,
	}

# For debugging only
if __name__ == "__main__":
	procedures_file = "../docs/ATP/procedures.xlsx"
	atp_file_path = "../docs/ATP/ATP.rst"
	data_sheets_file_path = "../docs/ATP/DataSheets.rst"
	
	setup(None)